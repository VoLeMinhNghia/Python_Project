# Form implementation generated from reading ui file 'QuanLyLop.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from functools import partial
from database import *
from docx import Document
from PyQt5.QtWidgets import QFileDialog

myDB = MY_DB()
instance  = None
instanceMaMon = None
instanceMaHocKy = None

class Ui_MainWindow(object):
    global myDB
    global instance 
    global instanceMaMon
    global instanceMaHocKy

    def setupUi(self, MainWindow):
        myDB.connect()
        self.addSVWindow = None
        self.detailSVWindow = None
        self.detailLopWindow = None
        self.detailDiemWindow = None

        self.addLopWindow = None
        self.addDiemWindow = None
        self.addDiemWindow = None


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabQuanLy = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabQuanLy.setGeometry(QtCore.QRect(0, 0, 801, 561))
        self.tabQuanLy.setObjectName("tabQuanLy")
        self.tabQLLop = QtWidgets.QWidget()
        self.tabQLLop.setObjectName("tabQLLop")
        self.btnSort = QtWidgets.QPushButton(parent=self.tabQLLop)
        self.btnSort.setGeometry(QtCore.QRect(90, 10, 81, 31))
        self.btnSort.setStyleSheet("background-color: rgb(255, 182, 153);\n"
"font: 10pt \"Segoe UI\";")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/ic/icsort.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btnSort.setIcon(icon)
        self.btnSort.setIconSize(QtCore.QSize(20, 20))
        self.btnSort.setObjectName("btnSort")
        self.btnAddLop = QtWidgets.QPushButton(parent=self.tabQLLop)
        self.btnAddLop.setGeometry(QtCore.QRect(340, 10, 91, 31))
        self.btnAddLop.setStyleSheet("background-color: rgb(170, 255, 127);\n"
"font: 10pt \"Segoe UI\";")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/ic/icadd.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btnAddLop.setIcon(icon1)
        self.btnAddLop.setIconSize(QtCore.QSize(20, 20))
        self.btnAddLop.setObjectName("btnAddLop")
        self.btnHome = QtWidgets.QPushButton(parent=self.tabQLLop)
        self.btnHome.setGeometry(QtCore.QRect(10, 10, 71, 31))
        self.btnHome.setStyleSheet("font: 10pt \"Segoe UI\";\n"
"background-color: rgb(255, 255, 127);")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/ic/icHome.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btnHome.setIcon(icon2)
        self.btnHome.setIconSize(QtCore.QSize(20, 20))
        self.btnHome.setObjectName("btnHome")
        self.tableLop = QtWidgets.QTableWidget(parent=self.tabQLLop)
        self.tableLop.setGeometry(QtCore.QRect(0, 60, 801, 421))
        self.tableLop.setRowCount(5)
        self.tableLop.setColumnCount(4)
        self.tableLop.setColumnWidth(0, 150)
        self.tableLop.setColumnWidth(1, 150)
        self.tableLop.setColumnWidth(2, 150)
        self.tableLop.setColumnWidth(3, 330)
        self.tableLop.setObjectName("tableLop")
        item = QtWidgets.QTableWidgetItem()
        self.tableLop.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableLop.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableLop.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableLop.setHorizontalHeaderItem(3, item)
        self.btnDetailLop = QtWidgets.QPushButton(parent=self.tabQLLop)
        self.btnDetailLop.setGeometry(QtCore.QRect(700, 10, 91, 31))
        self.btnDetailLop.setStyleSheet("background-color: rgb(218, 145, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDetailLop.setIconSize(QtCore.QSize(20, 20))
        self.btnDetailLop.setObjectName("btnDetailLop")
        self.groupBox_3 = QtWidgets.QGroupBox(parent=self.tabQLLop)
        self.groupBox_3.setGeometry(QtCore.QRect(450, 0, 241, 51))
        self.groupBox_3.setObjectName("groupBox_3")
        self.maLop_2 = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.maLop_2.setGeometry(QtCore.QRect(10, 20, 131, 22))
        self.maLop_2.setReadOnly(True)
        self.maLop_2.setObjectName("maLop_2")
        self.btnDeleteLop = QtWidgets.QPushButton(parent=self.groupBox_3)
        self.btnDeleteLop.setGeometry(QtCore.QRect(160, 10, 71, 31))
        self.btnDeleteLop.setStyleSheet("background-color: rgb(209, 0, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDeleteLop.setIconSize(QtCore.QSize(20, 20))
        self.btnDeleteLop.setObjectName("btnDeleteLop")
        self.btnReloadLop = QtWidgets.QPushButton(parent=self.tabQLLop)
        self.btnReloadLop.setGeometry(QtCore.QRect(180, 10, 91, 31))
        self.btnReloadLop.setStyleSheet("background-color: rgb(16, 16, 255);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        iconreload = QtGui.QIcon()
        iconreload.addPixmap(QtGui.QPixmap("images/ic/icreload.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btnReloadLop.setIcon(iconreload)
        self.btnReloadLop.setIconSize(QtCore.QSize(20, 20))
        self.btnReloadLop.setObjectName("btnReloadLop")
        self.tabQuanLy.addTab(self.tabQLLop, "")
        self.tabQLSV = QtWidgets.QWidget()
        self.tabQLSV.setObjectName("tabQLSV")
        self.btnFindSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnFindSV.setGeometry(QtCore.QRect(190, 50, 51, 31))
        self.btnFindSV.setObjectName("btnFindSV")
        self.lineEditFindSV = QtWidgets.QLineEdit(parent=self.tabQLSV)
        self.lineEditFindSV.setGeometry(QtCore.QRect(70, 50, 121, 31))
        self.lineEditFindSV.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.lineEditFindSV.setObjectName("lineEditFindSV")
        self.btnAddSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnAddSV.setGeometry(QtCore.QRect(280, 10, 121, 31))
        self.btnAddSV.setStyleSheet("background-color: rgb(170, 255, 127);\n"
"font: 10pt \"Segoe UI\";")
        self.btnAddSV.setIcon(icon1)
        self.btnAddSV.setIconSize(QtCore.QSize(20, 20))
        self.btnAddSV.setObjectName("btnAddSV")
        self.label_3 = QtWidgets.QLabel(parent=self.tabQLSV)
        self.label_3.setGeometry(QtCore.QRect(10, 60, 61, 16))
        self.label_3.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.tabQLSV)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 31, 16))
        self.label_4.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.tabQLLop)
        self.label_5.setGeometry(QtCore.QRect(0, 490, 361, 20))
        self.label_5.setStyleSheet("font: 700 italic 9pt \"Segoe UI\";\n"
"color: rgb(86, 86, 86);")
        self.label_5.setObjectName("label_5")
        self.cbBoxLop = QtWidgets.QComboBox(parent=self.tabQLSV)
        self.cbBoxLop.setGeometry(QtCore.QRect(50, 10, 101, 22))
        self.cbBoxLop.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.cbBoxLop.setObjectName("cbBoxLop")
        self.btnPrintAllSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnPrintAllSV.setGeometry(QtCore.QRect(730, 70, 61, 31))
        self.btnPrintAllSV.setStyleSheet("font: 10pt \"Segoe UI\";")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/ic/icprint.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btnPrintAllSV.setIcon(icon3)
        self.btnPrintAllSV.setIconSize(QtCore.QSize(20, 20))
        self.btnPrintAllSV.setObjectName("btnPrintAllSV")
        self.tableSinhVien = QtWidgets.QTableWidget(parent=self.tabQLSV)
        self.tableSinhVien.setGeometry(QtCore.QRect(0, 110, 801, 371))
        self.tableSinhVien.setStyleSheet("font: 8pt \"Segoe UI\";")
        self.tableSinhVien.setRowCount(5)
        self.tableSinhVien.setColumnCount(8)
        self.tableSinhVien.setColumnWidth(0, 50)
        self.tableSinhVien.setColumnWidth(1, 100)
        self.tableSinhVien.setColumnWidth(2, 130)
        self.tableSinhVien.setColumnWidth(3, 100)
        self.tableSinhVien.setColumnWidth(4, 70)
        self.tableSinhVien.setColumnWidth(5, 100)
        self.tableSinhVien.setColumnWidth(6, 150)
        self.tableSinhVien.setColumnWidth(7, 100)
        self.tableSinhVien.setObjectName("tableSinhVien")
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableSinhVien.setHorizontalHeaderItem(7, item)
        self.btnDetailSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnDetailSV.setGeometry(QtCore.QRect(660, 10, 91, 31))
        self.btnDetailSV.setStyleSheet("background-color: rgb(218, 145, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDetailSV.setIconSize(QtCore.QSize(20, 20))
        self.btnDetailSV.setObjectName("btnDetailSV")
        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.tabQLSV)
        self.groupBox_2.setGeometry(QtCore.QRect(410, 0, 241, 101))
        self.groupBox_2.setObjectName("groupBox_2")
        self.btnDeleteSV = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.btnDeleteSV.setGeometry(QtCore.QRect(170, 60, 61, 31))
        self.btnDeleteSV.setStyleSheet("background-color: rgb(209, 0, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDeleteSV.setIconSize(QtCore.QSize(20, 20))
        self.btnDeleteSV.setObjectName("btnDeleteSV")
        self.maSinhVien = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.maSinhVien.setGeometry(QtCore.QRect(10, 20, 91, 22))
        self.maSinhVien.setReadOnly(True)
        self.maSinhVien.setObjectName("maSinhVien")
        self.maLop = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.maLop.setGeometry(QtCore.QRect(130, 20, 91, 22))
        self.maLop.setReadOnly(True)
        self.maLop.setObjectName("maLop")
        self.hoTen = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.hoTen.setGeometry(QtCore.QRect(10, 70, 141, 22))
        self.hoTen.setReadOnly(True)
        self.hoTen.setObjectName("hoTen")
        self.btnCancalFind = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnCancalFind.setGeometry(QtCore.QRect(240, 50, 51, 31))
        self.btnCancalFind.setStyleSheet("background-color: rgb(176, 176, 176);")
        self.btnCancalFind.setObjectName("btnCancalFind")
        self.btnSortSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnSortSV.setGeometry(QtCore.QRect(310, 50, 91, 31))
        self.btnSortSV.setStyleSheet("background-color: rgb(255, 182, 153);\n"
"font: 10pt \"Segoe UI\";")
        self.btnSortSV.setIcon(icon)
        self.btnSortSV.setIconSize(QtCore.QSize(20, 20))
        self.btnSortSV.setObjectName("btnSortSV")
        self.btnReloadSV = QtWidgets.QPushButton(parent=self.tabQLSV)
        self.btnReloadSV.setGeometry(QtCore.QRect(170, 10, 91, 31))
        self.btnReloadSV.setStyleSheet("background-color: rgb(16, 16, 255);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnReloadSV.setIcon(iconreload)
        self.btnReloadSV.setIconSize(QtCore.QSize(20, 20))
        self.btnReloadSV.setObjectName("btnReloadSV")
        self.tabQuanLy.addTab(self.tabQLSV, "")
        self.tabQLDiem = QtWidgets.QWidget()
        self.tabQLDiem.setObjectName("tabQLDiem")
        self.label_6 = QtWidgets.QLabel(parent=self.tabQLDiem)
        self.label_6.setGeometry(QtCore.QRect(160, 20, 61, 16))
        self.label_6.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(parent=self.tabQLDiem)
        self.label_7.setGeometry(QtCore.QRect(390, 20, 51, 16))
        self.label_7.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.tabQLSV)
        self.label_8.setGeometry(QtCore.QRect(0, 490, 391, 20))
        self.label_8.setStyleSheet("font: 700 italic 9pt \"Segoe UI\";\n"
"color: rgb(86, 86, 86);")
        self.label_8.setObjectName("label_8")
        self.notFound = QtWidgets.QLabel(parent=self.tabQLSV)
        self.notFound.setGeometry(QtCore.QRect(20, 150, 471, 16))
        self.notFound.setStyleSheet("font: 700 italic 10pt \"Segoe UI\";\n"
"color: rgb(170, 0, 0);")
        self.notFound.setText("")
        self.notFound.setObjectName("notFound")
        self.cbBoxMon_2 = QtWidgets.QComboBox(parent=self.tabQLDiem)
        self.cbBoxMon_2.setGeometry(QtCore.QRect(220, 20, 161, 22))
        self.cbBoxMon_2.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.cbBoxMon_2.setObjectName("cbBoxMon_2")
        self.cbBoxHocKy = QtWidgets.QComboBox(parent=self.tabQLDiem)
        self.cbBoxHocKy.setGeometry(QtCore.QRect(450, 20, 101, 22))
        self.cbBoxHocKy.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.cbBoxHocKy.setObjectName("cbBoxHocKy")
        self.label = QtWidgets.QLabel(parent=self.tabQLDiem)
        self.label.setGeometry(QtCore.QRect(10, 20, 141, 16))
        self.label.setStyleSheet("font: 10pt \"Segoe UI\";\n"
"font: 700 9pt \"Segoe UI\";")
        self.label.setObjectName("label")
        self.btnAddDiem = QtWidgets.QPushButton(parent=self.tabQLDiem)
        self.btnAddDiem.setGeometry(QtCore.QRect(560, 10, 131, 31))
        self.btnAddDiem.setStyleSheet("background-color: rgb(170, 255, 127);\n"
"font: 10pt \"Segoe UI\";")
        self.btnAddDiem.setIcon(icon1)
        self.btnAddDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnAddDiem.setObjectName("btnAddDiem")
        self.tableDiem = QtWidgets.QTableWidget(parent=self.tabQLDiem)
        self.tableDiem.setGeometry(QtCore.QRect(0, 50, 691, 431))
        self.tableDiem.setRowCount(5)
        self.tableDiem.setColumnCount(6)
        self.tableDiem.setColumnWidth(0, 96)
        self.tableDiem.setColumnWidth(1, 96)
        self.tableDiem.setColumnWidth(2, 96)
        self.tableDiem.setColumnWidth(3, 96)
        self.tableDiem.setColumnWidth(4, 96)
        self.tableDiem.setColumnWidth(5, 96)
        self.tableDiem.setColumnWidth(6, 96)
        self.tableDiem.setObjectName("tableDiem")
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableDiem.setHorizontalHeaderItem(5, item)
        self.btnPrintAllDiem = QtWidgets.QPushButton(parent=self.tabQLDiem)
        self.btnPrintAllDiem.setGeometry(QtCore.QRect(700, 440, 91, 41))
        self.btnPrintAllDiem.setStyleSheet("font: 10pt \"Segoe UI\";")
        self.btnPrintAllDiem.setIcon(icon3)
        self.btnPrintAllDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnPrintAllDiem.setObjectName("btnPrintAllDiem")
        self.btnSortDiem = QtWidgets.QPushButton(parent=self.tabQLDiem)
        self.btnSortDiem.setGeometry(QtCore.QRect(700, 10, 91, 31))
        self.btnSortDiem.setStyleSheet("background-color: rgb(255, 182, 153);\n"
"font: 10pt \"Segoe UI\";")
        self.btnSortDiem.setIcon(icon)
        self.btnSortDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnSortDiem.setObjectName("btnSortDiem")
        self.groupBox = QtWidgets.QGroupBox(parent=self.tabQLDiem)
        self.groupBox.setGeometry(QtCore.QRect(700, 50, 91, 171))
        self.groupBox.setObjectName("groupBox")
        self.maSV = QtWidgets.QLineEdit(parent=self.groupBox)
        self.maSV.setGeometry(QtCore.QRect(10, 20, 71, 22))
        self.maSV.setReadOnly(True)
        self.maSV.setObjectName("maSV")
        self.maHK = QtWidgets.QLineEdit(parent=self.groupBox)
        self.maHK.setGeometry(QtCore.QRect(10, 50, 71, 22))
        self.maHK.setReadOnly(True)
        self.maHK.setObjectName("maHK")
        self.maMon = QtWidgets.QLineEdit(parent=self.groupBox)
        self.maMon.setGeometry(QtCore.QRect(10, 80, 71, 22))
        self.maMon.setReadOnly(True)
        self.maMon.setObjectName("maMon")
        self.btnDeleteDiem = QtWidgets.QPushButton(parent=self.groupBox)
        self.btnDeleteDiem.setGeometry(QtCore.QRect(20, 120, 51, 31))
        self.btnDeleteDiem.setStyleSheet("background-color: rgb(209, 0, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDeleteDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnDeleteDiem.setObjectName("btnDeleteDiem")
        self.btnDetailDiem = QtWidgets.QPushButton(parent=self.tabQLDiem)
        self.btnDetailDiem.setGeometry(QtCore.QRect(700, 230, 91, 31))
        self.btnDetailDiem.setStyleSheet("background-color: rgb(218, 145, 0);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnDetailDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnDetailDiem.setObjectName("btnDetailDiem")
        self.btnReloadDiem = QtWidgets.QPushButton(parent=self.tabQLDiem)
        self.btnReloadDiem.setGeometry(QtCore.QRect(700, 270, 91, 31))
        self.btnReloadDiem.setStyleSheet("background-color: rgb(16, 16, 255);\n"
"font: 10pt \"Segoe UI\";\n"
"color: rgb(255, 255, 255);")
        self.btnReloadDiem.setIcon(iconreload)
        self.btnReloadDiem.setIconSize(QtCore.QSize(20, 20))
        self.btnReloadDiem.setObjectName("btnReloadDiem")
        self.tabQuanLy.addTab(self.tabQLDiem, "")
        self.label_9 = QtWidgets.QLabel(parent=self.tabQLDiem)
        self.label_9.setGeometry(QtCore.QRect(0, 490, 391, 20))
        self.label_9.setStyleSheet("font: 700 italic 9pt \"Segoe UI\";\n"
"color: rgb(86, 86, 86);")
        self.label_9.setObjectName("label_9")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.btnHome.clicked.connect(partial(self.goHome, MainWindow))
        
        self.btnAddSV.clicked.connect(partial(self.goAddSV, MainWindow))
        self.btnAddDiem.clicked.connect(partial(self.goAddDiem, MainWindow))

        self.retranslateUi(MainWindow)
        self.tabQuanLy.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.lopTable = myDB.select_all_lop()

        self.tableLop.setRowCount(0)
        for row_num, row_data in enumerate(self.lopTable):
                self.tableLop.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableLop.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))

        self.tableLop.cellClicked.connect(self.on_tableLop_cellClicked)
        self.btnAddLop.clicked.connect(partial(self.goAddLop, MainWindow))
        self.btnDetailLop.clicked.connect(partial(self.goDetailLop, MainWindow))
        self.btnReloadLop.clicked.connect(self.load_TableLop)
        self.btnDeleteLop.clicked.connect(self.deleteLop)
        self.btnSort.clicked.connect(self.sort_tableLop_by_nienkhoa)

        self.sinhVienTable = myDB.select_all_sinhvien()
        self.tableSinhVien.setRowCount(0)
        for row_num, row_data in enumerate(self.sinhVienTable):
                self.tableSinhVien.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableSinhVien.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        
        self.lopTable = myDB.select_all_lop()
        self.cbBoxLop.clear()  # Xóa danh sách cũ trong combobox trước khi thêm mới
        self.cbBoxLop.addItem("All")
        for row_data in self.lopTable:
                ma_lop = row_data[0] 
                self.cbBoxLop.addItem(ma_lop)

        self.cbBoxLop.currentIndexChanged.connect(self.on_cbLop_clicked)
        self.btnFindSV.clicked.connect(self.findSV_byname)
        self.btnCancalFind.clicked.connect(self.cancalFind)
        self.tableSinhVien.cellClicked.connect(self.on_tableSV_cellClicked)
        self.btnAddSV.clicked.connect(partial(self.goAddSV, MainWindow))
        self.btnDetailSV.clicked.connect(partial(self.goDetailSV, MainWindow))
        self.btnReloadSV.clicked.connect(self.load_TableSV)
        self.btnDeleteSV.clicked.connect(self.deleteSV)
        self.btnSortSV.clicked.connect(self.sort_tableSV_by_name)
        self.btnPrintAllSV.clicked.connect
        
        self.diemTable = myDB.select_all_diem()
        self.tableDiem.setRowCount(0)
        for row_num, row_data in enumerate(self.diemTable):
                self.tableDiem.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        
        # Thêm cột điểm trung bình
        self.tableDiem.setColumnCount(self.tableDiem.columnCount() + 1)
        self.tableDiem.setHorizontalHeaderItem(self.tableDiem.columnCount() - 1, QtWidgets.QTableWidgetItem("ĐTB"))

        for row_num in range(self.tableDiem.rowCount()):
                diem_qua_trinh = float(self.tableDiem.item(row_num, 3).text())
                diem_giua_ky = float(self.tableDiem.item(row_num, 4).text())
                diem_cuoi_ky = float(self.tableDiem.item(row_num, 5).text())
                diem_trung_binh = (diem_qua_trinh * 20 + diem_giua_ky * 30 + diem_cuoi_ky * 50) / 100

                item = QtWidgets.QTableWidgetItem(str(diem_trung_binh))
                self.tableDiem.setItem(row_num, self.tableDiem.columnCount() - 1, item)

        self.monTable = myDB.select_all_monhoc()
        self.cbBoxMon_2.clear()  # Xóa danh sách cũ trong combobox trước khi thêm mới
        self.cbBoxMon_2.addItem("All")
        for row_data in self.monTable:
                ma_mon = row_data[0] 
                ten_mon = row_data[1]
                self.cbBoxMon_2.addItem(str(ma_mon) + " - " + ten_mon)

        self.hockyTable = myDB.select_all_hocky()
        self.cbBoxHocKy.clear()  # Xóa danh sách cũ trong combobox trước khi thêm mới
        self.cbBoxHocKy.addItem("All")
        for row_data in self.hockyTable:
                ma_hocky = row_data[0] 
                ten_hocky = row_data[1]
                self.cbBoxHocKy.addItem(str(ma_hocky) + " - " + ten_hocky)

        self.tableDiem.cellClicked.connect(self.on_tableDiem_cellClicked)
        self.cbBoxMon_2.currentIndexChanged.connect(self.on_cbMon_clicked)
        self.cbBoxHocKy.currentIndexChanged.connect(self.on_cbHocKy_clicked)
        self.btnDetailDiem.clicked.connect(partial(self.goDetailDiem, MainWindow))
        self.btnReloadDiem.clicked.connect(self.load_TableDiem)
        self.btnDeleteDiem.clicked.connect(self.deleteDiem)
        self.tableDiem.cellClicked.connect(self.on_tableDiem_cellClicked)
        self.btnSortDiem.clicked.connect(self.sort_tableDiem_by_mon)

    def goHome(self, MainWindow):
        from MainWindow import Ui_MainWindow as Ui_MainWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        MainWindow.close()
        self.window.show()

#---------------------------------------Quản Lý Lớp------------------------------------------
    def on_tableLop_cellClicked(self, row, column):
        global instance
        # Lấy mã lop từ dòng được click
        maLop = self.tableLop.item(row, 0).text()

        # Lấy thông tin lop từ CSDL
        lop = myDB.select_lop_by_id(maLop).fetchone()
        #lưu maLop vào biến instance của lớp (self) để có thể truy cập từ bên ngoài.
        instance = maLop
        # Hiển thị thông tin lop trong groupBox
        self.maLop_2.setText(lop[0])

    def goAddLop(self, MainWindow):
        if self.addLopWindow is None:
                from AddLop import Ui_MainWindow as Ui_MainWindow
                self.addLopWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
                self.ui.setupUi(self.addLopWindow)
        self.ui.new_window()
        self.addLopWindow.show()
        self.addLopWindow.activateWindow()

    def goDetailLop(self, MainWindow):
        global instance
        if self.maLop_2.text() == "":
                return
        if self.detailLopWindow is None:
                from DetailLop import Ui_MainWindow as Ui_MainWindow
                self.detailLopWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
        self.ui.set_selected_maLop(instance)
        self.ui.setupUi(self.detailLopWindow)
        self.detailLopWindow.show()
        self.detailLopWindow.activateWindow()

    def deleteLop(self):
        current_id = self.maLop_2.text()
        if(current_id == ""): return
        else:
             myDB.delete_lop(current_id)
             self.maLop_2.setText("")
             self.load_TableLop()

    def sort_tableLop_by_nienkhoa(self):
        # Lấy số cột trong bảng
        column_count = self.tableLop.columnCount()
        # Lấy số hàng trong bảng
        row_count = self.tableLop.rowCount()
        # Tạo một danh sách các dòng trong bảng, mỗi dòng là một list các giá trị trong ô
        rows = [[self.tableLop.item(row, col).text() for col in range(column_count)] for row in range(row_count)]
        # Sắp xếp các dòng theo thứ tự tăng dần của mã niên khóa (cột thứ ba)
        sorted_rows = sorted(rows, key=lambda row: int(row[2]))
        # Xóa tất cả các hàng cũ trong bảng
        self.tableLop.setRowCount(0)
        # Thêm các hàng đã sắp xếp vào bảng
        for row in sorted_rows:
                self.tableLop.insertRow(self.tableLop.rowCount())
                for col, value in enumerate(row):
                        item = QtWidgets.QTableWidgetItem(value)
                        self.tableLop.setItem(self.tableLop.rowCount() - 1, col, item)


    def load_TableLop(self):
        self.maLop_2.setText("")
        self.lopTable = myDB.select_all_lop()
        self.tableLop.setRowCount(0)
        for row_num, row_data in enumerate(self.lopTable):
                self.tableLop.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableLop.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))

#---------------------------------------Quản Lý SV------------------------------------------

    def on_cbLop_clicked(self):
        self.lineEditFindSV.setText("")
        self.maSinhVien.setText("")
        self.maLop.setText("")
        self.hoTen.setText("")
        selected_lop = self.cbBoxLop.currentText()  # Lấy lớp được chọn từ combobox
        if selected_lop == "All":
                # Hiển thị tất cả sinh viên
                self.load_TableSV()
        else:
                # Hiển thị sinh viên của lớp được chọn
                self.load_TableSinhVienByLop(selected_lop)

    def load_TableSinhVienByLop(self, selected_lop):
        self.notFound.setText("")
        self.sinhVienTable = myDB.select_sinhvien_by_lop(selected_lop)
        self.tableSinhVien.setRowCount(0)
        for row_num, row_data in enumerate(self.sinhVienTable):
                self.tableSinhVien.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableSinhVien.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))

    def findSV_byname(self):
        name_find = self.lineEditFindSV.text()
        if name_find == "":
              self.load_TableSV()
              return
        self.sinhVienTable = myDB.select_sinhvien_by_name(name_find)
        self.tableSinhVien.setRowCount(0)
        flag = 0
        for row_num, row_data in enumerate(self.sinhVienTable):
                flag = 1
                self.tableSinhVien.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                        self.tableSinhVien.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        if flag == 1: return
        if myDB.select_sinhvien_by_name(name_find).fetchone() is None:
                self.notFound.setText("Không có dữ liệu sinh viên cần tìm, hãy nhập lại thông tin chính xác hơn!!")
                return
    
    def cancalFind(self):
        self.lineEditFindSV.setText("")
        self.notFound.setText("")
        self.load_TableSV()

    def on_tableSV_cellClicked(self, row, column):
        global instance
        # Lấy mã SV từ dòng được click
        maSV = self.tableSinhVien.item(row, 0).text()

        # Lấy thông tin sinhvien từ CSDL
        sinhvien = myDB.select_sinhvien_by_id(maSV).fetchone()
        #lưu masinhvien vào biến instance của lớp (self) để có thể truy cập từ bên ngoài.
        instance = maSV
        # Hiển thị thông tin sinhvien trong groupBox
        self.maSinhVien.setText(str(sinhvien[0]))
        self.maLop.setText(sinhvien[1])
        self.hoTen.setText(sinhvien[2])

    def goAddSV(self, MainWindow):
        self.lineEditFindSV.setText("")
        self.notFound.setText("")
        if self.addSVWindow is None:
                from AddSV import Ui_MainWindow as Ui_MainWindow
                self.addSVWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
                self.ui.setupUi(self.addSVWindow)
        self.ui.new_window()
        self.addSVWindow.show()
        self.addSVWindow.activateWindow()

    def goDetailSV(self, MainWindow):
        global instance
        if self.maSinhVien.text() == "": return
        if self.detailSVWindow is None:
                from DetailSV import Ui_MainWindow as Ui_MainWindow
                self.detailSVWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
        self.ui.set_selected_maSV(instance)
        self.ui.setupUi(self.detailSVWindow)
        self.detailSVWindow.show()

    def deleteSV(self):
        current_id = self.maSinhVien.text()
        if(current_id == ""): return
        else:
             myDB.delete_sinhvien(current_id)
             self.maSinhVien.setText("")
             self.hoTen.setText("")
             self.maLop.setText("")
             self.load_TableSV()

    def sort_tableSV_by_name(self):
        # Lấy số cột trong bảng
        column_count = self.tableSinhVien.columnCount()
        # Lấy số hàng trong bảng
        row_count = self.tableSinhVien.rowCount()
        # Tạo một danh sách các dòng trong bảng, mỗi dòng là một list các giá trị trong ô
        rows = [[self.tableSinhVien.item(row, col).text() for col in range(column_count)] for row in range(row_count)]
        # Sắp xếp các dòng theo thứ tự tăng dần của cột tên SinhVien (cột thứ hai)
        sorted_rows = sorted(rows, key=lambda row: row[2])
        # Xóa tất cả các hàng cũ trong bảng
        self.tableSinhVien.setRowCount(0)
        # Thêm các hàng đã sắp xếp vào bảng
        for row in sorted_rows:
                self.tableSinhVien.insertRow(self.tableSinhVien.rowCount())
                for col, value in enumerate(row):
                        item = QtWidgets.QTableWidgetItem(value)
                        self.tableSinhVien.setItem(self.tableSinhVien.rowCount() - 1, col, item)
    def load_TableSV(self):
        self.lineEditFindSV.setText("")
        self.maSinhVien.setText("")
        self.maLop.setText("")
        self.hoTen.setText("")
        self.notFound.setText("")
        self.cbBoxLop.setCurrentText("All")
        self.sinhVienTable = myDB.select_all_sinhvien()
        self.tableSinhVien.setRowCount(0)
        for row_num, row_data in enumerate(self.sinhVienTable):
                self.tableSinhVien.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableSinhVien.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))

#---------------------------------------Quản Lý Điểm------------------------------------------

    def on_cbMon_clicked(self):
        selected_mon = self.cbBoxMon_2.currentText().split(" ")  # Lấy lớp được chọn từ combobox
        selected_mon = selected_mon[0]
        if selected_mon == "All":
                if self.cbBoxHocKy.currentText() != "All":
                        selected_hocky = self.cbBoxHocKy.currentText().split(" ")  # Lấy lớp được chọn từ combobox
                        selected_hocky = selected_hocky[0]
                        self.load_TableDiemByhocky(selected_hocky)
                # Hiển thị tất cả sinh viên
                else: self.load_TableDiem()
        else:
                # Hiển thị sinh viên của lớp được chọn
                self.load_TableDiemBymon(selected_mon)

    def on_cbHocKy_clicked(self):
        selected_hocky = self.cbBoxHocKy.currentText().split(" ")  # Lấy lớp được chọn từ combobox
        selected_hocky = selected_hocky[0]
        if selected_hocky == "All":
                if self.cbBoxMon_2.currentText() != "All":
                      selected_mon = self.cbBoxMon_2.currentText().split(" ")  # Lấy lớp được chọn từ combobox
                      selected_mon = selected_mon[0]
                      self.load_TableDiemBymon(selected_mon)
                # Hiển thị tất cả sinh viên
                else: self.load_TableDiem()
        else:
                # Hiển thị sinh viên của lớp được chọn
                self.load_TableDiemByhocky(selected_hocky)
        
    def load_TableDiemBymon(self, selected_mon):
        if self.cbBoxHocKy.currentText() != "All":
                selected_hocky = self.cbBoxHocKy.currentText().split(" ")  # Lấy lớp được chọn từ combobox
                selected_hocky = selected_hocky[0]
                self.diemTable = myDB.select_diem_by_hockyAndMon(selected_hocky, selected_mon)
                self.tableDiem.setRowCount(0)
                for row_num, row_data in enumerate(self.diemTable):
                        self.tableDiem.insertRow(row_num)
                        for col_num, col_data in enumerate(row_data):
                                self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        else: 
                self.diemTable = myDB.select_diem_by_mon(selected_mon)
                self.tableDiem.setRowCount(0)
                for row_num, row_data in enumerate(self.diemTable):
                        self.tableDiem.insertRow(row_num)
                        for col_num, col_data in enumerate(row_data):
                                self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))


    def load_TableDiemByhocky(self, selected_hocky):
        if self.cbBoxMon_2.currentText() != "All":
                selected_mon = self.cbBoxMon_2.currentText().split(" ")  # Lấy lớp được chọn từ combobox
                selected_mon = selected_mon[0]
                self.diemTable = myDB.select_diem_by_hockyAndMon(selected_hocky, selected_mon)
                self.tableDiem.setRowCount(0)
                for row_num, row_data in enumerate(self.diemTable):
                        self.tableDiem.insertRow(row_num)
                        for col_num, col_data in enumerate(row_data):
                                self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        else:
                self.diemTable = myDB.select_diem_by_hocky(selected_hocky)
                self.tableDiem.setRowCount(0)
                for row_num, row_data in enumerate(self.diemTable):
                        self.tableDiem.insertRow(row_num)
                        for col_num, col_data in enumerate(row_data):
                                self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))

    def on_tableDiem_cellClicked(self, row, column):
        global instance 
        global instanceMaMon
        global instanceMaHocKy

        maSV = self.tableDiem.item(row, 0).text()
        maHK = self.tableDiem.item(row, 1).text()
        maMon = self.tableDiem.item(row, 2).text()

        instance = maSV
        instanceMaHocKy = maHK
        instanceMaMon = maMon

        # Lấy thông tin khoa từ CSDL
        diemSV = myDB.select_diem_by_ids(int(maSV), int(maHK), int(maMon)).fetchone()

        # Hiển thị thông tin khoa trong groupBox
        self.maSV.setText(str(diemSV[0]))
        self.maHK.setText(str(diemSV[1]))
        self.maMon.setText(str(diemSV[2]))

    def goDetailDiem(self, MainWindow):
        global instance 
        global instanceMaMon
        global instanceMaHocKy

        if self.maSV.text() == "" or self.maHK.text() == "" or self.maMon.text() == "": return
        if self.detailDiemWindow is None:
                from DetailDiem import Ui_MainWindow as Ui_MainWindow
                self.detailDiemWindow = QtWidgets.QMainWindow()  # Sửa lại tên biến thành self.detailDiemWindow
                self.ui = Ui_MainWindow()
        self.ui.set_selected_bangDiem(instance, instanceMaHocKy, instanceMaMon)
        self.ui.setupUi(self.detailDiemWindow)
        self.detailDiemWindow.show()

    def goAddDiem(self, MainWindow):
        if self.addDiemWindow is None:
                from AddDiem import Ui_MainWindow as Ui_MainWindow
                self.addDiemWindow = QtWidgets.QMainWindow()
                self.ui = Ui_MainWindow()
                self.ui.setupUi(self.addDiemWindow)
        self.ui.new_window()
        self.addDiemWindow.show()
        self.addDiemWindow.activateWindow()

    def deleteDiem(self):
        current_id = self.maSV.text()
        current_mamon = self.maMon.text()
        if(current_id == "" or current_mamon == ""): return
        else:
             myDB.delete_diem(current_id, current_mamon)
             self.maSV.setText("")
             self.maMon.setText("")
             self.load_TableDiem()

    def sort_tableDiem_by_mon(self):
        # Lấy số cột trong bảng
        column_count = self.tableDiem.columnCount()
        # Lấy số hàng trong bảng
        row_count = self.tableDiem.rowCount()
        # Tạo một danh sách các dòng trong bảng, mỗi dòng là một list các giá trị trong ô
        rows = [[self.tableDiem.item(row, col).text() if self.tableDiem.item(row, col) is not None else "" for col in range(column_count)] for row in range(row_count)]
        # Sắp xếp các dòng theo thứ tự tăng dần của cột mon (cột thứ hai)
        sorted_rows = sorted(rows, key=lambda row: row[2])
        # Xóa tất cả các hàng cũ trong bảng
        self.tableDiem.setRowCount(0)
        # Thêm các hàng đã sắp xếp vào bảng
        for row in sorted_rows:
                self.tableDiem.insertRow(self.tableDiem.rowCount())
                for col, value in enumerate(row):
                        item = QtWidgets.QTableWidgetItem(value)
                        self.tableDiem.setItem(self.tableDiem.rowCount() - 1, col, item)

    def load_TableDiem(self):
        self.cbBoxHocKy.setCurrentText("All")
        self.cbBoxMon_2.setCurrentText("All")
        self.maSV.setText("")
        self.maHK.setText("")
        self.maMon.setText("")
        self.diemTable = myDB.select_all_diem()
        self.tableDiem.setRowCount(0)
        for row_num, row_data in enumerate(self.diemTable):
                self.tableDiem.insertRow(row_num)
                for col_num, col_data in enumerate(row_data):
                     self.tableDiem.setItem(row_num, col_num, QtWidgets.QTableWidgetItem(str(col_data)))
        #Thêm cột điểm
        for row_num in range(self.tableDiem.rowCount()):
                diem_qua_trinh = float(self.tableDiem.item(row_num, 3).text())
                diem_giua_ky = float(self.tableDiem.item(row_num, 4).text())
                diem_cuoi_ky = float(self.tableDiem.item(row_num, 5).text())
                diem_trung_binh = (diem_qua_trinh * 20 + diem_giua_ky * 30 + diem_cuoi_ky * 50) / 100

                item = QtWidgets.QTableWidgetItem(str(diem_trung_binh))
                self.tableDiem.setItem(row_num, self.tableDiem.columnCount() - 1, item)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Quản Lý Sinh Viên"))
        self.btnSort.setText(_translate("MainWindow", "Sắp Xếp"))
        self.btnAddLop.setText(_translate("MainWindow", "Thêm Lớp"))
        self.btnHome.setText(_translate("MainWindow", "Home"))
        item = self.tableLop.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Mã lớp"))
        item = self.tableLop.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Mã nghành"))
        item = self.tableLop.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Mã niên khóa"))
        item = self.tableLop.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Tên lớp"))
        self.btnDetailLop.setText(_translate("MainWindow", "Xem Chi Tiết"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Thông Tin"))
        self.btnDeleteLop.setText(_translate("MainWindow", "Xóa Lớp"))
        self.tabQuanLy.setTabText(self.tabQuanLy.indexOf(self.tabQLLop), _translate("MainWindow", "Quản Lý Lớp"))
        self.btnFindSV.setText(_translate("MainWindow", "Tìm"))
        self.btnAddSV.setText(_translate("MainWindow", "Thêm Sinh Viên"))
        self.label_3.setText(_translate("MainWindow", "Tìm Kiếm"))
        self.label_4.setText(_translate("MainWindow", "Lớp"))
        self.label_5.setText(_translate("MainWindow", "Cập nhật danh sách lớp sau thao tác THÊM hoặc CHỈNH SỬA !!"))
        self.btnPrintAllSV.setText(_translate("MainWindow", "Xuất"))
        item = self.tableSinhVien.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "MSSV"))
        item = self.tableSinhVien.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Mã lớp"))
        item = self.tableSinhVien.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Họ tên"))
        item = self.tableSinhVien.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Ngày sinh"))
        item = self.tableSinhVien.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Giới tính"))
        item = self.tableSinhVien.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Dân tộc"))
        item = self.tableSinhVien.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Địa chỉ"))
        item = self.tableSinhVien.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "SĐT"))
        self.btnDetailSV.setText(_translate("MainWindow", "Xem Chi Tiết"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Thông Tin"))
        self.btnDeleteSV.setText(_translate("MainWindow", "Xóa"))
        self.btnCancalFind.setText(_translate("MainWindow", "Hủy"))
        self.btnSortSV.setText(_translate("MainWindow", "Sắp Xếp"))
        self.tabQuanLy.setTabText(self.tabQuanLy.indexOf(self.tabQLSV), _translate("MainWindow", "Quản Lý Sinh Viên"))
        self.label_6.setText(_translate("MainWindow", "Môn Học"))
        self.label_7.setText(_translate("MainWindow", "Học Kỳ"))
        self.label_8.setText(_translate("MainWindow", "Cập nhật danh sách sinh viên sau thao tác THÊM hoặc CHỈNH SỬA !!"))
        self.label_9.setText(_translate("MainWindow", "Cập nhật danh sách điểm sau thao tác THÊM hoặc CHỈNH SỬA !!"))
        self.label.setText(_translate("MainWindow", "CẬP NHẬT BẢNG ĐIỂM"))
        self.btnAddDiem.setText(_translate("MainWindow", "Thêm Bảng Điểm"))
        item = self.tableDiem.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "MSSV"))
        item = self.tableDiem.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Mã học kỳ"))
        item = self.tableDiem.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Mã môn học"))
        item = self.tableDiem.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Điểm quá trình"))
        item = self.tableDiem.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Điểm giữa kỳ"))
        item = self.tableDiem.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Điểm cuối kỳ"))
        self.btnPrintAllDiem.setText(_translate("MainWindow", "Xuất"))
        self.btnSortDiem.setText(_translate("MainWindow", "Sắp Xếp"))
        self.groupBox.setTitle(_translate("MainWindow", "Thông Tin"))
        self.btnDeleteDiem.setText(_translate("MainWindow", "Xóa"))
        self.btnDetailDiem.setText(_translate("MainWindow", "Xem Chi Tiết"))
        self.tabQuanLy.setTabText(self.tabQuanLy.indexOf(self.tabQLDiem), _translate("MainWindow", "Quản Lý Điểm"))
        self.btnReloadDiem.setText(_translate("MainWindow", "Cập Nhật"))
        self.btnReloadLop.setText(_translate("MainWindow", "Cập Nhật"))
        self.btnReloadSV.setText(_translate("MainWindow", "Cập Nhật"))

def closeWindow():
    global myDB
    myDB.disconnect()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.lastWindowClosed.connect(closeWindow)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
